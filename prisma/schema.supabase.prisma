// Prisma schema for Supabase integration
// This file will be used when migrating to Supabase

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Use the direct URL for migrations, schema push, etc.
  url       = env("DIRECT_URL")
  // Use the connection pooling URL for the Prisma client
  directUrl = env("DIRECT_URL")
}

// User model 
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  hashedPassword    String?
  role              String    @default("user")
  accounts          Account[]
  sessions          Session[]
  orders            Order[]
  created           DateTime  @default(now())
  updated           DateTime  @updatedAt
  discogsUsername   String?
  discogsId         String?   @unique
  discogsToken      String?
  discogsTokenSecret String?
  address           Address?
  phone             String?
  needsProfile      Boolean   @default(true)

  @@map("users")
}

// Account model for OAuth providers (like Google, Discord, etc)
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// User session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// VerificationToken for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Order model
model Order {
  id              String         @id @default(cuid())
  user            User?          @relation(fields: [userId], references: [id])
  userId          String?        @map("user_id")
  amount          Float
  currency        String         @default("USD")
  status          String
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  paymentMethod   String?        @map("payment_method")
  paymentMethodId String?        @map("payment_method_id")
  paymentIntentId String?        @unique @map("payment_intent_id")
  address         Address?       @relation(fields: [addressId], references: [id])
  addressId       String?        @unique @map("address_id")
  items           OrderItem[]
  metadata        Json?
  discountCode    String?        @map("discount_code")
  discountAmount  Float?         @map("discount_amount")
  shipping        Float?
  subtotal        Float?
  tax             Float?
  taxDetails      Json?          @map("tax_details")
  email           String?
  invoiceUrl      String?        @map("invoice_url")
  receiptUrl      String?        @map("receipt_url")
  checkoutSession String?        @map("checkout_session")
  orderNumber     String?        @unique @map("order_number")
  trackingNumber  String?        @map("tracking_number") 
  trackingUrl     String?        @map("tracking_url")
  shippedAt       DateTime?      @map("shipped_at")
  deliveredAt     DateTime?      @map("delivered_at")
  cancelledAt     DateTime?      @map("cancelled_at")
  refundedAt      DateTime?      @map("refunded_at")
  customerNotes   String?        @map("customer_notes")
  adminNotes      String?        @map("admin_notes")
  
  @@map("orders")
}

// Order item model
model OrderItem {
  id          String    @id @default(cuid())
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String    @map("order_id")
  recordId    String?   @map("record_id")
  releaseId   String?   @map("release_id")
  quantity    Int       @default(1)
  price       Float
  title       String?
  artist      String?
  thumbnailUrl String?   @map("thumbnail_url")
  discogsListingId String? @map("discogs_listing_id") @unique
  itemMetadata Json?     @map("item_metadata")

  @@map("order_items")
}

// Address model
model Address {
  id           String  @id @default(cuid())
  street       String
  city         String
  state        String?
  postalCode   String  @map("postal_code")
  country      String
  user         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String? @unique @map("user_id")
  order        Order?
  isDefault    Boolean @default(false) @map("is_default")

  @@map("addresses")
}

// Cart model
model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique @map("user_id")
  items     CartItem[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  sessionId String?    @unique @map("session_id")

  @@map("carts")
}

// Cart item model
model CartItem {
  id             String   @id @default(cuid())
  cart           Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId         String   @map("cart_id")
  recordId       String   @map("record_id")
  quantity       Int      @default(1)
  price          Float
  discogsListingId String @map("discogs_listing_id")
  addedAt        DateTime @default(now()) @map("added_at")

  @@unique([cartId, discogsListingId])
  @@map("cart_items")
}