generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Order {
  id              String    @id @default(cuid())
  userId          String?
  status          String    @default("pending")
  total           Float
  shippingAddress Json
  billingAddress  Json?
  stripeId        String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  items           OrderItem[]
  user            User?     @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  discogsId   String
  title       String
  price       Float
  quantity    Int
  condition   String?
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model DiscogsAuth {
  id                String   @id @default(cuid())
  username          String   @unique
  accessToken       String
  accessTokenSecret String
  lastVerified      DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("discogs_auth")
}

model WebhookLog {
  id        String   @id @default(cuid())
  type      String
  payload   String   @db.Text
  timestamp DateTime @default(now())

  @@map("webhook_logs")
}

